// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_CONNECTION_URI")
}

enum InstanceConnectionStatus {
  open
  close
  connecting
}

enum DeviceMessage {
  ios
  android
  web
  unknown
  desktop
}

enum SessionStatus {
  opened
  closed
  paused
}

enum TriggerType {
  all
  keyword
  none
  advanced
}

enum TriggerOperator {
  contains
  equals
  startsWith
  endsWith
  regex
}

enum OpenaiBotType {
  assistant
  chatCompletion
}

enum DifyBotType {
  chatBot
  textGenerator
  agent
  workflow
}

model Instance {
  id                      String                   @id @default(cuid())
  name                    String                   @unique
  connectionStatus        InstanceConnectionStatus @default(open)
  ownerJid                String?
  profileName             String?
  profilePicUrl           String?
  integration             String?
  number                  String?
  businessId              String?
  token                   String?
  clientName              String?
  disconnectionReasonCode Int?
  disconnectionObject     Json?
  disconnectionAt         DateTime?
  createdAt               DateTime?                @default(now())
  updatedAt               DateTime?                @updatedAt
  Chat                    Chat[]
  Contact                 Contact[]
  Message                 Message[]
  Webhook                 Webhook?
  Chatwoot                Chatwoot?
  Label                   Label[]
  Proxy                   Proxy?
  Setting                 Setting?
  Rabbitmq                Rabbitmq?
  Sqs                     Sqs?
  Websocket               Websocket?
  Typebot                 Typebot[]
  Session                 Session?
  MessageUpdate           MessageUpdate[]
  TypebotSetting          TypebotSetting?
  Media                   Media[]
  OpenaiCreds             OpenaiCreds[]
  OpenaiBot               OpenaiBot[]
  OpenaiSetting           OpenaiSetting?
  Template                Template[]
  Dify                    Dify[]
  DifySetting             DifySetting?
  integrationSessions     IntegrationSession[]
  EvolutionBot            EvolutionBot[]
  EvolutionBotSetting     EvolutionBotSetting?
  Flowise                 Flowise[]
  FlowiseSetting          FlowiseSetting?
  Pusher                  Pusher?
  AudioFilter             InstanceAudioFilter?
}

model Session {
  id        String   @id @default(cuid())
  sessionId String   @unique
  creds     String?  
  createdAt DateTime @default(now()) 
  Instance  Instance @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

model Chat {
  id             String    @id @default(cuid())
  remoteJid      String    
  name           String?   
  labels         Json?     
  createdAt      DateTime? @default(now()) 
  updatedAt      DateTime? @updatedAt 
  Instance       Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId     String
  unreadMessages Int       @default(0)
  @@index([instanceId])
  @@index([remoteJid])
}

model Contact {
  id            String    @id @default(cuid())
  remoteJid     String    
  pushName      String?   
  profilePicUrl String?   
  createdAt     DateTime? @default(now()) 
  updatedAt     DateTime? @updatedAt 
  Instance      Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId    String

  @@unique([remoteJid, instanceId])
  @@index([remoteJid])
  @@index([instanceId])
}

model Message {
  id                           String          @id @default(cuid())
  key                          Json            
  pushName                     String?         
  participant                  String?         
  messageType                  String          
  message                      Json            
  contextInfo                  Json?           
  source                       DeviceMessage
  messageTimestamp             Int             
  chatwootMessageId            Int?            
  chatwootInboxId              Int?            
  chatwootConversationId       Int?            
  chatwootContactInboxSourceId String?         
  chatwootIsRead               Boolean?        
  Instance                     Instance        @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId                   String
  MessageUpdate                MessageUpdate[]
  Media                        Media?
  webhookUrl                   String?         
  status                       String?         

  sessionId String?
  session   IntegrationSession? @relation(fields: [sessionId], references: [id])
  @@index([instanceId])
}

model MessageUpdate {
  id          String   @id @default(cuid())
  keyId       String   
  remoteJid   String   
  fromMe      Boolean  
  participant String?  
  pollUpdates Json?    
  status      String   
  Message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId   String
  Instance    Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId  String
  @@index([instanceId])
  @@index([messageId])
}

model Webhook {
  id                    String    @id @default(cuid())
  url                   String    
  headers               Json?     
  enabled               Boolean?  @default(true) 
  events                Json?     
  webhookByEvents       Boolean?  @default(false) 
  webhookBase64         Boolean?  @default(false) 
  messageTypes          Json?     
  excludeMessageTypes   Json?     
  textFilters           Json?     
  audioProcessing       Json?     
  createdAt             DateTime? @default(now()) 
  updatedAt             DateTime  @updatedAt 
  Instance              Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId            String    @unique
  @@index([instanceId])
}

model Chatwoot {
  id                      String    @id @default(cuid())
  enabled                 Boolean?  @default(true) 
  accountId               String?   
  token                   String?   
  url                     String?   
  nameInbox               String?   
  signMsg                 Boolean?  @default(false) 
  signDelimiter           String?   
  number                  String?   
  reopenConversation      Boolean?  @default(false) 
  conversationPending     Boolean?  @default(false) 
  mergeBrazilContacts     Boolean?  @default(false) 
  importContacts          Boolean?  @default(false) 
  importMessages          Boolean?  @default(false) 
  daysLimitImportMessages Int?      
  organization            String?   
  logo                    String?   
  ignoreJids              Json?
  createdAt               DateTime? @default(now()) 
  updatedAt               DateTime  @updatedAt 
  Instance                Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId              String    @unique
}

model Label {
  id           String    @id @default(cuid())
  labelId      String?   
  name         String    
  color        String    
  predefinedId String?   
  createdAt    DateTime? @default(now()) 
  updatedAt    DateTime  @updatedAt 
  Instance     Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId   String

  @@unique([labelId, instanceId])
}

model Proxy {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false) 
  host       String    
  port       String    
  protocol   String    
  username   String    
  password   String    
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime  @updatedAt 
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Setting {
  id              String    @id @default(cuid())
  rejectCall      Boolean   @default(false) 
  msgCall         String?   
  groupsIgnore    Boolean   @default(false) 
  alwaysOnline    Boolean   @default(false) 
  readMessages    Boolean   @default(false) 
  readStatus      Boolean   @default(false) 
  syncFullHistory Boolean   @default(false) 
  wavoipToken     String?   
  createdAt       DateTime? @default(now()) 
  updatedAt       DateTime  @updatedAt 
  Instance        Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String    @unique
  @@index([instanceId])
}

model Rabbitmq {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false) 
  events     Json      
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime  @updatedAt 
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Sqs {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false) 
  events     Json      
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime  @updatedAt 
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Websocket {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false) 
  events     Json      
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime  @updatedAt 
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Pusher {
  id         String    @id @default(cuid())
  enabled    Boolean   @default(false) 
  appId      String    
  key        String    
  secret     String    
  cluster    String    
  useTLS     Boolean   @default(false) 
  events     Json      
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime  @updatedAt 
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String    @unique
}

model Typebot {
  id              String           @id @default(cuid())
  enabled         Boolean          @default(true) 
  description     String?          
  url             String           
  typebot         String           
  expire          Int?             @default(0) 
  keywordFinish   String?          
  delayMessage    Int?             
  unknownMessage  String?          
  listeningFromMe Boolean?         @default(false) 
  stopBotFromMe   Boolean?         @default(false) 
  keepOpen        Boolean?         @default(false) 
  debounceTime    Int?             
  createdAt       DateTime?        @default(now()) 
  updatedAt       DateTime?        @updatedAt 
  ignoreJids      Json?
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?
  Instance        Instance         @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String
  TypebotSetting  TypebotSetting[]
}

model TypebotSetting {
  id                String    @id @default(cuid())
  expire            Int?      @default(0) 
  keywordFinish     String?   
  delayMessage      Int?      
  unknownMessage    String?   
  listeningFromMe   Boolean?  @default(false) 
  stopBotFromMe     Boolean?  @default(false) 
  keepOpen          Boolean?  @default(false) 
  debounceTime      Int?      
  typebotIdFallback String?   
  ignoreJids        Json?
  createdAt         DateTime? @default(now()) 
  updatedAt         DateTime  @updatedAt 
  Fallback          Typebot?  @relation(fields: [typebotIdFallback], references: [id])
  Instance          Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId        String    @unique
}

model Media {
  id         String    @id @default(cuid())
  fileName   String    @unique 
  type       String    
  mimetype   String    
  createdAt  DateTime? @default(now()) 
  Message    Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId  String    @unique
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
}

model OpenaiCreds {
  id              String         @id @default(cuid())
  name            String?        @unique 
  apiKey          String?        @unique 
  createdAt       DateTime?      @default(now()) 
  updatedAt       DateTime       @updatedAt 
  Instance        Instance       @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String
  OpenaiAssistant OpenaiBot[]
  OpenaiSetting   OpenaiSetting?
}

model OpenaiBot {
  id                String           @id @default(cuid())
  enabled           Boolean          @default(true) 
  description       String?          
  botType           OpenaiBotType
  assistantId       String?          
  functionUrl       String?          
  model             String?          
  systemMessages    Json?            
  assistantMessages Json?            
  userMessages      Json?            
  maxTokens         Int?             
  expire            Int?             @default(0) 
  keywordFinish     String?          
  delayMessage      Int?             
  unknownMessage    String?          
  listeningFromMe   Boolean?         @default(false) 
  stopBotFromMe     Boolean?         @default(false) 
  keepOpen          Boolean?         @default(false) 
  debounceTime      Int?             
  splitMessages     Boolean?         @default(false) 
  timePerChar       Int?             @default(50) 
  ignoreJids        Json?
  triggerType       TriggerType?
  triggerOperator   TriggerOperator?
  triggerValue      String?
  createdAt         DateTime?        @default(now()) 
  updatedAt         DateTime         @updatedAt 
  OpenaiCreds       OpenaiCreds      @relation(fields: [openaiCredsId], references: [id], onDelete: Cascade)
  openaiCredsId     String
  Instance          Instance         @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId        String
  OpenaiSetting     OpenaiSetting[]
}

model IntegrationSession {
  id         String        @id @default(cuid())
  sessionId  String        
  remoteJid  String        
  pushName   String?
  status     SessionStatus
  awaitUser  Boolean       @default(false) 
  context    Json?
  type       String?       
  createdAt  DateTime?     @default(now()) 
  updatedAt  DateTime      @updatedAt 
  Message    Message[]
  Instance   Instance      @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
  parameters Json?         

  botId String?
}

model OpenaiSetting {
  id               String       @id @default(cuid())
  expire           Int?         @default(0) 
  keywordFinish    String?      
  delayMessage     Int?         
  unknownMessage   String?      
  listeningFromMe  Boolean?     @default(false) 
  stopBotFromMe    Boolean?     @default(false) 
  keepOpen         Boolean?     @default(false) 
  debounceTime     Int?         
  ignoreJids       Json?
  splitMessages    Boolean?     @default(false) 
  timePerChar      Int?         @default(50) 
  speechToText     Boolean?     @default(false) 
  createdAt        DateTime?    @default(now()) 
  updatedAt        DateTime     @updatedAt 
  OpenaiCreds      OpenaiCreds? @relation(fields: [openaiCredsId], references: [id])
  openaiCredsId    String       @unique
  Fallback         OpenaiBot?   @relation(fields: [openaiIdFallback], references: [id])
  openaiIdFallback String?      
  Instance         Instance     @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId       String       @unique
}

model Template {
  id         String    @id @default(cuid())
  templateId String    @unique 
  name       String    @unique 
  template   Json      
  webhookUrl String?   
  createdAt  DateTime? @default(now()) 
  updatedAt  DateTime  @updatedAt 
  Instance   Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId String
}

model Dify {
  id              String           @id @default(cuid())
  enabled         Boolean          @default(true) 
  description     String?          
  botType         DifyBotType
  apiUrl          String?          
  apiKey          String?          
  expire          Int?             @default(0) 
  keywordFinish   String?          
  delayMessage    Int?             
  unknownMessage  String?          
  listeningFromMe Boolean?         @default(false) 
  stopBotFromMe   Boolean?         @default(false) 
  keepOpen        Boolean?         @default(false) 
  debounceTime    Int?             
  ignoreJids      Json?
  splitMessages   Boolean?         @default(false) 
  timePerChar     Int?             @default(50) 
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?
  createdAt       DateTime?        @default(now()) 
  updatedAt       DateTime         @updatedAt 
  Instance        Instance         @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String
  DifySetting     DifySetting[]
}

model DifySetting {
  id              String    @id @default(cuid())
  expire          Int?      @default(0) 
  keywordFinish   String?   
  delayMessage    Int?      
  unknownMessage  String?   
  listeningFromMe Boolean?  @default(false) 
  stopBotFromMe   Boolean?  @default(false) 
  keepOpen        Boolean?  @default(false) 
  debounceTime    Int?      
  ignoreJids      Json?
  splitMessages   Boolean?  @default(false) 
  timePerChar     Int?      @default(50) 
  createdAt       DateTime? @default(now()) 
  updatedAt       DateTime  @updatedAt 
  Fallback        Dify?     @relation(fields: [difyIdFallback], references: [id])
  difyIdFallback  String?   
  Instance        Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String    @unique
}

model EvolutionBot {
  id                  String                @id @default(cuid())
  enabled             Boolean               @default(true) 
  description         String?               
  apiUrl              String?               
  apiKey              String?               
  expire              Int?                  @default(0) 
  keywordFinish       String?               
  delayMessage        Int?                  
  unknownMessage      String?               
  listeningFromMe     Boolean?              @default(false) 
  stopBotFromMe       Boolean?              @default(false) 
  keepOpen            Boolean?              @default(false) 
  debounceTime        Int?                  
  ignoreJids          Json?
  splitMessages       Boolean?              @default(false) 
  timePerChar         Int?                  @default(50) 
  triggerType         TriggerType?
  triggerOperator     TriggerOperator?
  triggerValue        String?
  createdAt           DateTime?             @default(now()) 
  updatedAt           DateTime              @updatedAt 
  Instance            Instance              @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId          String
  EvolutionBotSetting EvolutionBotSetting[]
}

model EvolutionBotSetting {
  id              String        @id @default(cuid())
  expire          Int?          @default(0) 
  keywordFinish   String?       
  delayMessage    Int?          
  unknownMessage  String?       
  listeningFromMe Boolean?      @default(false) 
  stopBotFromMe   Boolean?      @default(false) 
  keepOpen        Boolean?      @default(false) 
  debounceTime    Int?          
  ignoreJids      Json?
  splitMessages   Boolean?      @default(false) 
  timePerChar     Int?          @default(50) 
  createdAt       DateTime?     @default(now()) 
  updatedAt       DateTime      @updatedAt 
  Fallback        EvolutionBot? @relation(fields: [botIdFallback], references: [id])
  botIdFallback   String?       
  Instance        Instance      @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String        @unique
}

model Flowise {
  id              String           @id @default(cuid())
  enabled         Boolean          @default(true) 
  description     String?          
  apiUrl          String?          
  apiKey          String?          
  expire          Int?             @default(0) 
  keywordFinish   String?          
  delayMessage    Int?             
  unknownMessage  String?          
  listeningFromMe Boolean?         @default(false) 
  stopBotFromMe   Boolean?         @default(false) 
  keepOpen        Boolean?         @default(false) 
  debounceTime    Int?             
  ignoreJids      Json?
  splitMessages   Boolean?         @default(false) 
  timePerChar     Int?             @default(50) 
  triggerType     TriggerType?
  triggerOperator TriggerOperator?
  triggerValue    String?
  createdAt       DateTime?        @default(now()) 
  updatedAt       DateTime         @updatedAt 
  Instance        Instance         @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId      String
  FlowiseSetting  FlowiseSetting[]
}

model FlowiseSetting {
  id                String    @id @default(cuid())
  expire            Int?      @default(0) 
  keywordFinish     String?   
  delayMessage      Int?      
  unknownMessage    String?   
  listeningFromMe   Boolean?  @default(false) 
  stopBotFromMe     Boolean?  @default(false) 
  keepOpen          Boolean?  @default(false) 
  debounceTime      Int?      
  ignoreJids        Json?
  splitMessages     Boolean?  @default(false) 
  timePerChar       Int?      @default(50) 
  createdAt         DateTime? @default(now()) 
  updatedAt         DateTime  @updatedAt 
  Fallback          Flowise?  @relation(fields: [flowiseIdFallback], references: [id])
  flowiseIdFallback String?   
  Instance          Instance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  instanceId        String    @unique
}

model IsOnWhatsapp {
  id         String   @id @default(cuid())
  remoteJid  String   @unique
  jidOptions String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model InstanceAudioFilter {
  id                    Int      @id @default(autoincrement())
  instanceName          String   @unique @map("instance_name")
  minDurationSeconds    Int      @default(3) @map("min_duration_seconds")
  maxDurationSeconds    Int      @default(300) @map("max_duration_seconds")
  enabled               Boolean  @default(true)
  replyToOversizeAudio  Boolean  @default(true) @map("reply_to_oversize_audio")
  oversizeReaction      String   @default("⸘") @map("oversize_reaction")
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  Instance             Instance @relation(fields: [instanceName], references: [name], onDelete: Cascade)

  @@map("instance_audio_filters")
}

model GlobalWebhookConfig {
  id                        Int      @id @default(autoincrement())
  webhookPrincipalEnabled   Boolean  @default(false) @map("webhook_principal_enabled")
  webhookPrincipalUrl       String?  @map("webhook_principal_url")
  webhookSecundarioEnabled  Boolean  @default(false) @map("webhook_secundario_enabled")
  webhookSecundarioUrl      String?  @map("webhook_secundario_url")
  webhookByEvents           Boolean  @default(false) @map("webhook_by_events")
  headers                   String?  @map("headers")
  createdAt                 DateTime @default(now()) @map("created_at")
  updatedAt                 DateTime @updatedAt @map("updated_at")

  @@map("global_webhook_config")
}
